[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "correctionlib-gradients"
dynamic = ["version"]
description = 'Automatic differentiation for high-energy physics correction factor calculations.'
readme = "README.md"
requires-python = ">=3.10"
license = { text = "BSD-3-Clause" }
keywords = []
authors = [
  { name = "Enrico Guiraud", email = "enrico.guiraud@pm.me" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Physics",
]
dependencies = [
  "correctionlib",
  "jax",
  "jaxlib",
  "scipy"
]

[project.urls]
Documentation = "https://github.com/eguiraud/correctionlib-gradients#readme"
Issues = "https://github.com/eguiraud/correctionlib-gradients/issues"
Source = "https://github.com/eguiraud/correctionlib-gradients"

[tool.hatch.version]
path = "src/correctionlib_gradients/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "ipython",
  "ipdb",
  "pre-commit",
  "mypy",
  "sphinx",
  "myst-parser"
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/correctionlib_gradients tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error:::correctionlib_gradients.*"]
log_cli_level = "info"
testpaths = ["tests"]

[tool.black]
target-version = ["py310", "py311"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
src = ["src"]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["correctionlib_gradients"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["correctionlib_gradients", "tests"]
branch = true
parallel = true
omit = [
  "src/correctionlib_gradients/__about__.py",
]

[tool.coverage.paths]
correctionlib_gradients = ["src/correctionlib_gradients", "*/correctionlib-gradients/src/correctionlib_gradients"]
tests = ["tests", "*/correctionlib-gradients/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
files = "src"
python_version = "3.11"
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true

[[tool.mypy.overrides]]
module = [ "numpy.*", ]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [ "correctionlib.*", ]
ignore_missing_imports = true

# JAX actually comes with typing, but in pre-commit.ci we run out of time
# if we try to install them in the environment. So we cannot add JAX to
# the additional_dependencies of mypy in .pre-commit-config.yaml,
# so we have to tell mypy that it's ok if it's missing.
[[tool.mypy.overrides]]
module = [ "jax.*", "jaxlib.*" ]
ignore_missing_imports = true
